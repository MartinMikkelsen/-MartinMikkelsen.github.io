<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:media="http://search.yahoo.com/mrss/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:georss="http://www.georss.org/georss">

  <channel>
    <title>
      <![CDATA[  Martin Mikkelsen  ]]>
    </title>
    <link> https://martinmikkelsen.github.io </link>
    <description>
      <![CDATA[  Personal page  ]]>
    </description>
    <atom:link
      href="https://martinmikkelsen.github.io/feed.xml"
      rel="self"
      type="application/rss+xml" />


<item>
  <title>
    <![CDATA[  Code  ]]>
  </title>
  <link> https://martinmikkelsen.github.io/_site/menu1/index.html </link>
  <guid> https://martinmikkelsen.github.io/_site/menu1/index.html </guid>
  <description>
    <![CDATA[  Coulomb wave functions and other numerical problems  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<div class="franklin-toc"><ol><li>Coulomb Wave Funcitons<ol><li>Examples</li></ol></li><li>Solving non-linear partial differential equation numerically \(u_{xx}+u_{yy}=\mathrm{e}^{u}\)<ol><li>Solution </li></ol></li><li>Optimal quadrature rule for heavy tail measure<ol><li>Solution </li></ol></li></ol></div>
<h2 id="coulomb_wave_funcitons">Coulomb Wave Funcitons</h2>
<p>As a part of my master&#39;s thesis I had to make a numerical implementation of the Coulomb wave functions. The Coulomb wave equation for a charged particle with arbitrary angular momentum and charge is given by </p>
\[	
    \nabla^2\psi +\left( k^2-\frac{2\mu}{\hbar^2}V(r)\right)\psi = 0,
\]
<p>where \(\mu\) is the reduced mass of the system. The radial wave function \(u(r)\) satisfies the following differential equation</p>
\[
	\frac{\text{d}^2 u_\ell}{\text{d}r^2}+\left( k^2-\frac{\ell(\ell+1)}{r^2}-\frac{2\mu}{\hbar^2}\frac{Ze^2}{r}\right)u_\ell=0,
\]
<p>where \(Z\) is the product of the charges. Two independent solutions can be found to this equation – these are called the regular and irregular Coulomb wave functions denoted \(F_\ell(r)\) and \(G_\ell(r)\) respectively. The regular Coulomb wave function \(F_\ell(r)\) is a real function that vanishes at \(r=0\) and the behaviour of the function is described using a parameter \(\eta\) which describes how strongly the Coulomb interaction is</p>
\[
	\eta = \frac{Zmc\alpha }{\hbar k},
\]
<p>where \(m\) is the mass of the particle, \(k\) is the wave number and \(\alpha\) is the fine structure constant. The solution to is given by</p>
\[
	F_\ell(\eta,kr) = C_\ell (\eta) (kr)^{\ell+1}\text{e}^{-ikr}  {}_1 F_1(\ell+1-i\eta,2\ell+2,2ikr),
\]
<p>where \({}_1F_1(kr)\) is a confluent hypergeometric function and \(C_\ell(\eta)\) is a normalization constant given by </p>
\[
	C_\ell(\eta) = \frac{2^\ell \text{e}^{-\pi\eta/2}|\Gamma(\ell+1+i\eta)|}{(2\ell+1)!},
\]
<p>where \(\Gamma\) is the gamma function. For numerical purposes, it is useful to use the <a href="https://dlmf.nist.gov/33.7">integral representation of the regular Coulomb wave function</a></p>
\[
	F_\ell(\eta,\rho) = \frac{\rho^{\ell+1}2^\ell e^{i\rho-(\pi\eta/2)}}{|\Gamma(\ell+1+i\eta)|} \int_0^1 e^{-2i\rho t}t^{\ell+i\eta}(1-t)^{\ell-i\eta} \, \text{d}t.
\]
<p>This implementation will need the gamma function from <a href="https://github.com/JuliaMath/SpecialFunctions.jl">SpecialFunctions.jl</a>. First we define complex integration</p>
<pre><code class="language-julia">using QuadGK, SpecialFunctions, Plotsfunction complex_quadrature&#40;func,a,b&#41;
    function real_func&#40;x&#41;
        return real&#40;func&#40;x&#41;&#41;
    end
    function imag_func&#40;x&#41;
        imag&#40;func&#40;x&#41;&#41;
    end
    real_integral &#61; quadgk&#40;real_func,a,b&#41;
    imag_integral &#61; quadgk&#40;imag_func,a,b&#41;
    return real_integral<a href="https://docs.sciml.ai/MethodOfLines/stable">1</a> &#43; 1im*imag_integral<a href="https://docs.sciml.ai/MethodOfLines/stable">1</a>
end</code></pre>
<p>And we can now define the regular and irregular Coulomb wave functions</p>
<pre><code class="language-julia">function regular_coulomb&#40;ℓ,η,ρ&#41;
    First &#61; ρ^&#40;ℓ&#43;1&#41;*2^ℓ*exp&#40;1im*ρ-&#40;π*η/2&#41;&#41;/&#40;abs&#40;gamma&#40;ℓ&#43;1&#43;1im*η&#41;&#41;&#41;
    Integral_value &#61; complex_quadrature&#40;t -&gt; exp&#40;-2*1im.*ρ*t&#41;*t^&#40;ℓ&#43;1im*η&#41;*&#40;1-t&#41;^&#40;ℓ-1im*η&#41;,0,1&#41;
    return First.*Integral_value
endfunction C&#40;ℓ,η&#41;
    return 2^ℓ*exp&#40;-π*η/2&#41;*&#40;abs&#40;gamma&#40;ℓ&#43;1&#43;1im*η&#41;&#41;/&#40;factorial&#40;2*ℓ&#43;1&#41;&#41;&#41;
endfunction irregular_coulomb&#40;ℓ,η,ρ&#41;
    First &#61; exp&#40;-1im*ρ&#41;*ρ^&#40;-ℓ&#41;/&#40;factorial&#40;2*ℓ&#43;1&#41;*C&#40;ℓ,η&#41;&#41;
    Integral_value &#61; complex_quadrature&#40;t -&gt; exp&#40;-t&#41;*t^&#40;-ℓ-1im*η&#41;*&#40;t&#43;2*1im*ρ&#41;^&#40;ℓ&#43;1im*η&#41;,0.01,1e4&#41;
    return First.*Integral_value
end</code></pre>
<h3 id="examples">Examples</h3>
<p>To test the implementation consider the following examples</p>
<pre><code class="language-julia">x &#61; range&#40;0,25,1000&#41;
plot&#40;x,regular_Coulomb.&#40;0,0.3,x&#41;, label&#61;L&quot;F_0&#40;0.3,ρ&#41;&quot;&#41;
plot&#33;&#40;x,regular_Coulomb.&#40;0,-0.3,x&#41;, label&#61;L&quot;F_0&#40;-0.3,ρ&#41;&quot;&#41;
xlabel&#33;&#40;L&quot;ρ&quot;&#41;
title&#33;&#40;&quot;Regular Coulomb Wave Functions&quot;&#41;</code></pre>
<p>Which will show the following</p>
<p><span style="color:red;">// Image matching '/assets/_site/menu1/output/Coulomb1' not found. //</span></p>
<p>Use a similar approach to plot the regular Coulomb functions for different a \(\ell\)</p>
<pre><code class="language-julia">x &#61; range&#40;0,25,1000&#41;
plot&#40;x,regular_Coulomb.&#40;1e-5,5,x&#41;, label&#61;L&quot;F_0&#40;5,ρ&#41;&quot;&#41;
plot&#33;&#40;x,regular_Coulomb.&#40;1,5,x&#41;, label&#61;L&quot;F_1&#40;5,ρ&#41;&quot;&#41;
plot&#33;&#40;x,regular_Coulomb.&#40;2,5,x&#41;, label&#61;L&quot;F_2&#40;5,ρ&#41;&quot;&#41;
plot&#33;&#40;x,regular_Coulomb.&#40;3,5,x&#41;, label&#61;L&quot;F_3&#40;5,ρ&#41;&quot;&#41;
title&#33;&#40;&quot;Regular Coulomb Wave Functions&quot;&#41;
xlabel&#33;&#40;L&quot;ρ&quot;&#41;</code></pre>
<p><span style="color:red;">// Image matching '/assets/_site/menu1/output/Coulomb2' not found. //</span></p>
<h2 id="solving_non-linear_partial_differential_equation_numerically_u_xxu_yymathrmeu">Solving non-linear partial differential equation numerically \(u_{xx}+u_{yy}=\mathrm{e}^{u}\)</h2>
<p>This is a part of my answer on the <a href="https://scicomp.stackexchange.com/questions/43502/solving-non-linear-partial-differential-equation-numerically-u-xxu-yy-ma">Computational Science StackExchange</a> to the differential equation </p>
\[u_{xx}+u_{yy}=\mathrm{e}^{u}\]
<p>with the following boundary conditions:</p>
\[u(0,y)=a, \quad u_x(0,y) = b\]
\[u(x,0)=c, \quad u_y(x,0) = d\]
<h3 id="solution">Solution </h3>
<p>Use something like <a href="https://docs.sciml.ai/MethodOfLines/stable">MethodOfLines.jl</a> to solve your problem. Modify the following <a href="https://docs.sciml.ai/MethodOfLines/stable/tutorials/heatss/">example</a>, something like this </p>
<pre><code class="language-julia">using ModelingToolkit, MethodOfLines, DomainSets, NonlinearSolve@parameters x y
@variables u&#40;..&#41;Dx &#61; Differential&#40;x&#41;
Dy &#61; Differential&#40;y&#41;
Dxx &#61; Differential&#40;x&#41;^2
Dyy &#61; Differential&#40;y&#41;^2eq &#61; Dxx&#40;u&#40;x, y&#41;&#41; &#43; Dyy&#40;u&#40;x, y&#41;&#41; ~ exp&#40;u&#40;x,y&#41;&#41;a &#61; 5.2
b &#61; 4.3
c &#61; 3.5
d &#61; 2.2bcs &#61; &#91;u&#40;0, y&#41; ~ a,
       u&#40;x, 0&#41; ~ c,
       Dx&#40;u&#40;0, y&#41;&#41; ~ b,
       Dy&#40;u&#40;x, 0&#41;&#41; ~ d&#93;
domains &#61; &#91;x ∈ Interval&#40;0.0, 1.0&#41;,
           y ∈ Interval&#40;0.0, 1.0&#41;&#93;@named pdesys &#61; PDESystem&#40;&#91;eq&#93;, bcs, domains, &#91;x, y&#93;, &#91;u&#40;x, y&#41;&#93;&#41;dx &#61; 0.1
dy &#61; 0.1discretization &#61; MOLFiniteDifference&#40;&#91;x &#61;&gt; dx, y &#61;&gt; dy&#93;, nothing, approx_order&#61;2&#41;prob &#61; discretize&#40;pdesys, discretization&#41;
sol &#61; NonlinearSolve.solve&#40;prob, NewtonRaphson&#40;&#41;&#41;u_sol &#61; sol&#91;u&#40;x, y&#41;&#93;using Plotsheatmap&#40;sol&#91;x&#93;, sol&#91;y&#93;, u_sol, xlabel&#61;&quot;x&quot;, ylabel&#61;&quot;y&quot;,
        title&#61;&quot;Solution&quot;&#41;
		
savefig&#40;joinpath&#40;@OUTPUT, &quot;heat.png&quot;&#41;&#41;</code></pre>
<p>Where I&#39;ve plugged in some random boundary conditions.</p>
<p><span style="color:red;">// Image matching '/assets/_site/menu1/output/heat' not found. //</span></p>
<p>Where the white space is due to the non-linearity of the differential equation. </p>
<h2 id="optimal_quadrature_rule_for_heavy_tail_measure">Optimal quadrature rule for heavy tail measure</h2>
<p>This is my solution to the following <a href="https://scicomp.stackexchange.com/questions/43374/optimal-quadrature-rule-for-heavy-tail-measure/43377#43377">question</a>:</p>
<p>I&#39;m looking for a well-thought quadrature rule for this measure \(d\mu(t)=\frac{dt}{t^s}\) for \(s\in(0,1)\), the underlying motivation is to compute this integral</p>
\[
\lambda^{s-1}=\frac{1}{\Gamma(1-s)}\int_{0}^{\infty} e^{-t\lambda}\frac{dt}{t^s}
\]
<p>with \(\lambda > 0\), see this reference, Page 5, equation &#40;5&#41;, https://arxiv.org/abs/1808.05159. So I&#39;m looking for a way of dealing with the singularity at \(t=0\) as well as the limit to \(\infty\). Observe that</p>
\[
\int_{T}^\infty \frac{dt}{t^s} = \infty
\]
<p>I was using the <code>QuadGK.jl</code> package and it is working just fine</p>
<pre><code class="language-julia">λ &#61; 2; s &#61; 0.8
λs &#61; λ^&#40;s-1&#41;f&#40;t&#41; &#61; exp&#40;-λ*t&#41;/t^s/gamma&#40;1-s&#41;
res, err &#61; quadgk&#40;f,0,Inf&#41;</code></pre>
<p>The predicted error and the real error is the same order of magnitude. However, when using the package for another formula</p>
\[
\lambda^s = \frac{1}{\Gamma(-s)}\int_0^\infty (e^{-t\lambda}-1)\frac{dt}{t^{1+s}}
\]
<p>same reference as before. I again do the quadrature</p>
<pre><code class="language-julia">λs &#61; λ^s
g&#40;t&#41; &#61; &#40;exp&#40;-λ*t&#41;-1&#41;/t^&#40;1&#43;s&#41;/gamma&#40;-s&#41;
res, err &#61; quadgk&#40;g,0,Inf&#41;</code></pre>
<p>it works just fine, but this time the real error is of order 1e-3 while the predicted error is around 1e-8. And if I put a positive matrix instead of a scalar</p>
<pre><code class="language-julia">A &#61; # some positive definite matrix
h&#40;t&#41; &#61; &#40;exp&#40;-A.*t&#41;-I&#41;/t^&#40;1&#43;s&#41;/gamma&#40;-s&#41;
res, err &#61; quadgk&#40;h,0,Inf&#41;</code></pre>
<p>I get an ERROR: DomainError with 0.5: integrand produced NaN in the interval &#40;0.0, 1.0&#41;, and, to my understanding, quadgk does not evaluate the function at \(0\) as per the documentation https://juliamath.github.io/QuadGK.jl/stable/. And if I write</p>
<pre><code class="language-julia">res, err &#61; quadgk&#40;h,1e-50,Inf&#41;</code></pre>
<p>the integral blows up. </p>
<h3 id="solution__2">Solution </h3>
<p>You can split the integral up such that you don&#39;t get the singularity at \(t=0\). Something like this</p>
<pre><code class="language-julia">using QuadGK
using SpecialFunctions λ &#61; 2.0; s &#61; 0.8
λs &#61; λ^&#40;s-1&#41;f&#40;t&#41; &#61; exp&#40;-λ*t&#41;/t^s/gamma&#40;1-s&#41;
@show res, err &#61; quadgk&#40;f,0,Inf&#41;λs &#61; λ^s
g&#40;t&#41; &#61; &#40;exp&#40;-λ*t&#41;-1&#41;/t^&#40;1&#43;s&#41;/gamma&#40;-s&#41;
@show res, err &#61; quadgk&#40;g,0,Inf&#41;A &#61; &#91;2 -1 0; -1 2 -1; 0 -1 2&#93; # some positive definite matrix
h&#40;t&#41; &#61; &#40;exp&#40;-A.*t&#41;-I&#41;/t^&#40;1&#43;s&#41;/gamma&#40;-s&#41;singularity_integral, singularity_error &#61; quadgk&#40;h, 1e-10, 1e-5&#41;
regular_integral, regular_error &#61; quadgk&#40;h, 1e-5, Inf&#41;
@show result &#61; singularity_integral &#43; regular_integral
@show error &#61; singularity_error &#43; regular_error</code></pre>
<p>which will print</p>
<pre><code class="language-julia">&#40;res, err&#41; &#61; quadgk&#40;f, 0, Inf&#41; &#61; &#40;0.8705505365052336, 1.2164780075652479e-8&#41;
&#40;res, err&#41; &#61; quadgk&#40;g, 0, Inf&#41; &#61; &#40;1.7402976255082268, 2.515036776166618e-8&#41;
result &#61; singularity_integral &#43; regular_integral &#61; &#91;1.6837899364901885 -0.7050512093960599 -0.03988519645256732; -0.7050512093960599 1.6439047399317526 -0.7050512098966073; -0.03988519645256732 -0.7050512098966073 1.683789936502625&#93;
error &#61; singularity_error &#43; regular_error &#61; 3.822238569033589e-8</code></pre>
<p>Alternatively, you can also look into something like &#91;Cauchy principal values&#93;&#91;https://en.wikipedia.org/wiki/Cauchy<em>principal</em>value&#93; and &#91;this example&#93;&#91;https://juliamath.github.io/QuadGK.jl/stable/quadgk-examples/#Cauchy-principal-values&#93;</p>
<p>–Edit: update to new information–</p>
<p>I&#39;m afraid I can&#39;t reproduce the same error. When I run your code &#40;I&#39;ve added using LinearAlgebra for &#91;diagm&#93;&#91;https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/#LinearAlgebra.diagm&#93;&#41; I get </p>
<pre><code class="language-julia">res2 &#61; &#91;15.354655632950173 -6.419790221101635 -0.3665284746983265; -6.419790221101635 14.988127158828647 -6.4197902215468154; -0.3665284746983265 -6.4197902215468154 15.354655632887033&#93;
norm&#40;res2 &#43; As&#41; / norm&#40;As&#41; &#61; 0.018647374162762107
norm&#40;res1 &#43; As&#41; / norm&#40;As&#41; &#61; 0.01864737561229984
norm&#40;res1 - res2&#41; &#61; 4.9872522079524005e-8
4.9872522079524005e-8</code></pre>
 ]]>
  </content:encoded>
    
  <pubDate>Wed, 29 Nov 2023 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Martin Mikkelsen</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  Code  ]]>
  </title>
  <link> https://martinmikkelsen.github.io/menu1/index.html </link>
  <guid> https://martinmikkelsen.github.io/menu1/index.html </guid>
  <description>
    <![CDATA[  Coulomb wave functions and other numerical problems  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<div class="franklin-toc"><ol><li>Coulomb Wave Funcitons<ol><li>Examples</li></ol></li><li>Solving non-linear partial differential equation numerically \(u_{xx}+u_{yy}=\mathrm{e}^{u}\)<ol><li>Solution </li></ol></li><li>Optimal quadrature rule for heavy tail measure<ol><li>Solution </li></ol></li></ol></div>
<h2 id="coulomb_wave_funcitons">Coulomb Wave Funcitons</h2>
<p>As a part of my master&#39;s thesis I had to make a numerical implementation of the Coulomb wave functions. The Coulomb wave equation for a charged particle with arbitrary angular momentum and charge is given by </p>
\[	
    \nabla^2\psi +\left( k^2-\frac{2\mu}{\hbar^2}V(r)\right)\psi = 0,
\]
<p>where \(\mu\) is the reduced mass of the system. The radial wave function \(u(r)\) satisfies the following differential equation</p>
\[
	\frac{\text{d}^2 u_\ell}{\text{d}r^2}+\left( k^2-\frac{\ell(\ell+1)}{r^2}-\frac{2\mu}{\hbar^2}\frac{Ze^2}{r}\right)u_\ell=0,
\]
<p>where \(Z\) is the product of the charges. Two independent solutions can be found to this equation – these are called the regular and irregular Coulomb wave functions denoted \(F_\ell(r)\) and \(G_\ell(r)\) respectively. The regular Coulomb wave function \(F_\ell(r)\) is a real function that vanishes at \(r=0\) and the behaviour of the function is described using a parameter \(\eta\) which describes how strongly the Coulomb interaction is</p>
\[
	\eta = \frac{Zmc\alpha }{\hbar k},
\]
<p>where \(m\) is the mass of the particle, \(k\) is the wave number and \(\alpha\) is the fine structure constant. The solution to is given by</p>
\[
	F_\ell(\eta,kr) = C_\ell (\eta) (kr)^{\ell+1}\text{e}^{-ikr}  {}_1 F_1(\ell+1-i\eta,2\ell+2,2ikr),
\]
<p>where \({}_1F_1(kr)\) is a confluent hypergeometric function and \(C_\ell(\eta)\) is a normalization constant given by </p>
\[
	C_\ell(\eta) = \frac{2^\ell \text{e}^{-\pi\eta/2}|\Gamma(\ell+1+i\eta)|}{(2\ell+1)!},
\]
<p>where \(\Gamma\) is the gamma function. For numerical purposes, it is useful to use the <a href="https://dlmf.nist.gov/33.7">integral representation of the regular Coulomb wave function</a></p>
\[
	F_\ell(\eta,\rho) = \frac{\rho^{\ell+1}2^\ell e^{i\rho-(\pi\eta/2)}}{|\Gamma(\ell+1+i\eta)|} \int_0^1 e^{-2i\rho t}t^{\ell+i\eta}(1-t)^{\ell-i\eta} \, \text{d}t.
\]
<p>This implementation will need the gamma function from <a href="https://github.com/JuliaMath/SpecialFunctions.jl">SpecialFunctions.jl</a>. First we define complex integration</p>
<pre><code class="language-julia">using QuadGK, SpecialFunctions, Plotsfunction complex_quadrature&#40;func,a,b&#41;
    function real_func&#40;x&#41;
        return real&#40;func&#40;x&#41;&#41;
    end
    function imag_func&#40;x&#41;
        imag&#40;func&#40;x&#41;&#41;
    end
    real_integral &#61; quadgk&#40;real_func,a,b&#41;
    imag_integral &#61; quadgk&#40;imag_func,a,b&#41;
    return real_integral<a href="https://docs.sciml.ai/MethodOfLines/stable">1</a> &#43; 1im*imag_integral<a href="https://docs.sciml.ai/MethodOfLines/stable">1</a>
end</code></pre>
<p>And we can now define the regular and irregular Coulomb wave functions</p>
<pre><code class="language-julia">function regular_coulomb&#40;ℓ,η,ρ&#41;
    First &#61; ρ^&#40;ℓ&#43;1&#41;*2^ℓ*exp&#40;1im*ρ-&#40;π*η/2&#41;&#41;/&#40;abs&#40;gamma&#40;ℓ&#43;1&#43;1im*η&#41;&#41;&#41;
    Integral_value &#61; complex_quadrature&#40;t -&gt; exp&#40;-2*1im.*ρ*t&#41;*t^&#40;ℓ&#43;1im*η&#41;*&#40;1-t&#41;^&#40;ℓ-1im*η&#41;,0,1&#41;
    return First.*Integral_value
endfunction C&#40;ℓ,η&#41;
    return 2^ℓ*exp&#40;-π*η/2&#41;*&#40;abs&#40;gamma&#40;ℓ&#43;1&#43;1im*η&#41;&#41;/&#40;factorial&#40;2*ℓ&#43;1&#41;&#41;&#41;
endfunction irregular_coulomb&#40;ℓ,η,ρ&#41;
    First &#61; exp&#40;-1im*ρ&#41;*ρ^&#40;-ℓ&#41;/&#40;factorial&#40;2*ℓ&#43;1&#41;*C&#40;ℓ,η&#41;&#41;
    Integral_value &#61; complex_quadrature&#40;t -&gt; exp&#40;-t&#41;*t^&#40;-ℓ-1im*η&#41;*&#40;t&#43;2*1im*ρ&#41;^&#40;ℓ&#43;1im*η&#41;,0.01,1e4&#41;
    return First.*Integral_value
end</code></pre>
<h3 id="examples">Examples</h3>
<p>To test the implementation consider the following examples</p>
<pre><code class="language-julia">x &#61; range&#40;0,25,1000&#41;
plot&#40;x,regular_Coulomb.&#40;0,0.3,x&#41;, label&#61;L&quot;F_0&#40;0.3,ρ&#41;&quot;&#41;
plot&#33;&#40;x,regular_Coulomb.&#40;0,-0.3,x&#41;, label&#61;L&quot;F_0&#40;-0.3,ρ&#41;&quot;&#41;
xlabel&#33;&#40;L&quot;ρ&quot;&#41;
title&#33;&#40;&quot;Regular Coulomb Wave Functions&quot;&#41;</code></pre>
<p>Which will show the following</p>
<img src="https://martinmikkelsen.github.io/assets/menu1/output/Coulomb1.png" alt="">
<p>Use a similar approach to plot the regular Coulomb functions for different a \(\ell\)</p>
<pre><code class="language-julia">x &#61; range&#40;0,25,1000&#41;
plot&#40;x,regular_Coulomb.&#40;1e-5,5,x&#41;, label&#61;L&quot;F_0&#40;5,ρ&#41;&quot;&#41;
plot&#33;&#40;x,regular_Coulomb.&#40;1,5,x&#41;, label&#61;L&quot;F_1&#40;5,ρ&#41;&quot;&#41;
plot&#33;&#40;x,regular_Coulomb.&#40;2,5,x&#41;, label&#61;L&quot;F_2&#40;5,ρ&#41;&quot;&#41;
plot&#33;&#40;x,regular_Coulomb.&#40;3,5,x&#41;, label&#61;L&quot;F_3&#40;5,ρ&#41;&quot;&#41;
title&#33;&#40;&quot;Regular Coulomb Wave Functions&quot;&#41;
xlabel&#33;&#40;L&quot;ρ&quot;&#41;</code></pre>
<img src="https://martinmikkelsen.github.io/assets/menu1/output/Coulomb2.png" alt="">
<h2 id="solving_non-linear_partial_differential_equation_numerically_u_xxu_yymathrmeu">Solving non-linear partial differential equation numerically \(u_{xx}+u_{yy}=\mathrm{e}^{u}\)</h2>
<p>This is a part of my answer on the <a href="https://scicomp.stackexchange.com/questions/43502/solving-non-linear-partial-differential-equation-numerically-u-xxu-yy-ma">Computational Science StackExchange</a> to the differential equation </p>
\[u_{xx}+u_{yy}=\mathrm{e}^{u}\]
<p>with the following boundary conditions:</p>
\[u(0,y)=a, \quad u_x(0,y) = b\]
\[u(x,0)=c, \quad u_y(x,0) = d\]
<h3 id="solution">Solution </h3>
<p>Use something like <a href="https://docs.sciml.ai/MethodOfLines/stable">MethodOfLines.jl</a> to solve your problem. Modify the following <a href="https://docs.sciml.ai/MethodOfLines/stable/tutorials/heatss/">example</a>, something like this </p>
<pre><code class="language-julia">using ModelingToolkit, MethodOfLines, DomainSets, NonlinearSolve@parameters x y
@variables u&#40;..&#41;Dx &#61; Differential&#40;x&#41;
Dy &#61; Differential&#40;y&#41;
Dxx &#61; Differential&#40;x&#41;^2
Dyy &#61; Differential&#40;y&#41;^2eq &#61; Dxx&#40;u&#40;x, y&#41;&#41; &#43; Dyy&#40;u&#40;x, y&#41;&#41; ~ exp&#40;u&#40;x,y&#41;&#41;a &#61; 5.2
b &#61; 4.3
c &#61; 3.5
d &#61; 2.2bcs &#61; &#91;u&#40;0, y&#41; ~ a,
       u&#40;x, 0&#41; ~ c,
       Dx&#40;u&#40;0, y&#41;&#41; ~ b,
       Dy&#40;u&#40;x, 0&#41;&#41; ~ d&#93;
domains &#61; &#91;x ∈ Interval&#40;0.0, 1.0&#41;,
           y ∈ Interval&#40;0.0, 1.0&#41;&#93;@named pdesys &#61; PDESystem&#40;&#91;eq&#93;, bcs, domains, &#91;x, y&#93;, &#91;u&#40;x, y&#41;&#93;&#41;dx &#61; 0.1
dy &#61; 0.1discretization &#61; MOLFiniteDifference&#40;&#91;x &#61;&gt; dx, y &#61;&gt; dy&#93;, nothing, approx_order&#61;2&#41;prob &#61; discretize&#40;pdesys, discretization&#41;
sol &#61; NonlinearSolve.solve&#40;prob, NewtonRaphson&#40;&#41;&#41;u_sol &#61; sol&#91;u&#40;x, y&#41;&#93;using Plotsheatmap&#40;sol&#91;x&#93;, sol&#91;y&#93;, u_sol, xlabel&#61;&quot;x&quot;, ylabel&#61;&quot;y&quot;,
        title&#61;&quot;Solution&quot;&#41;
		
savefig&#40;joinpath&#40;@OUTPUT, &quot;heat.png&quot;&#41;&#41;</code></pre>
<p>Where I&#39;ve plugged in some random boundary conditions.</p>
<img src="https://martinmikkelsen.github.io/assets/menu1/output/heat.png" alt="">
<p>Where the white space is due to the non-linearity of the differential equation. </p>
<h2 id="optimal_quadrature_rule_for_heavy_tail_measure">Optimal quadrature rule for heavy tail measure</h2>
<p>This is my solution to the following <a href="https://scicomp.stackexchange.com/questions/43374/optimal-quadrature-rule-for-heavy-tail-measure/43377#43377">question</a>:</p>
<p>I&#39;m looking for a well-thought quadrature rule for this measure \(d\mu(t)=\frac{dt}{t^s}\) for \(s\in(0,1)\), the underlying motivation is to compute this integral</p>
\[
\lambda^{s-1}=\frac{1}{\Gamma(1-s)}\int_{0}^{\infty} e^{-t\lambda}\frac{dt}{t^s}
\]
<p>with \(\lambda > 0\), see this reference, Page 5, equation &#40;5&#41;, https://arxiv.org/abs/1808.05159. So I&#39;m looking for a way of dealing with the singularity at \(t=0\) as well as the limit to \(\infty\). Observe that</p>
\[
\int_{T}^\infty \frac{dt}{t^s} = \infty
\]
<p>I was using the <code>QuadGK.jl</code> package and it is working just fine</p>
<pre><code class="language-julia">λ &#61; 2; s &#61; 0.8
λs &#61; λ^&#40;s-1&#41;f&#40;t&#41; &#61; exp&#40;-λ*t&#41;/t^s/gamma&#40;1-s&#41;
res, err &#61; quadgk&#40;f,0,Inf&#41;</code></pre>
<p>The predicted error and the real error is the same order of magnitude. However, when using the package for another formula</p>
\[
\lambda^s = \frac{1}{\Gamma(-s)}\int_0^\infty (e^{-t\lambda}-1)\frac{dt}{t^{1+s}}
\]
<p>same reference as before. I again do the quadrature</p>
<pre><code class="language-julia">λs &#61; λ^s
g&#40;t&#41; &#61; &#40;exp&#40;-λ*t&#41;-1&#41;/t^&#40;1&#43;s&#41;/gamma&#40;-s&#41;
res, err &#61; quadgk&#40;g,0,Inf&#41;</code></pre>
<p>it works just fine, but this time the real error is of order 1e-3 while the predicted error is around 1e-8. And if I put a positive matrix instead of a scalar</p>
<pre><code class="language-julia">A &#61; # some positive definite matrix
h&#40;t&#41; &#61; &#40;exp&#40;-A.*t&#41;-I&#41;/t^&#40;1&#43;s&#41;/gamma&#40;-s&#41;
res, err &#61; quadgk&#40;h,0,Inf&#41;</code></pre>
<p>I get an ERROR: DomainError with 0.5: integrand produced NaN in the interval &#40;0.0, 1.0&#41;, and, to my understanding, quadgk does not evaluate the function at \(0\) as per the documentation https://juliamath.github.io/QuadGK.jl/stable/. And if I write</p>
<pre><code class="language-julia">res, err &#61; quadgk&#40;h,1e-50,Inf&#41;</code></pre>
<p>the integral blows up. </p>
<h3 id="solution__2">Solution </h3>
<p>You can split the integral up such that you don&#39;t get the singularity at \(t=0\). Something like this</p>
<pre><code class="language-julia">using QuadGK
using SpecialFunctions λ &#61; 2.0; s &#61; 0.8
λs &#61; λ^&#40;s-1&#41;f&#40;t&#41; &#61; exp&#40;-λ*t&#41;/t^s/gamma&#40;1-s&#41;
@show res, err &#61; quadgk&#40;f,0,Inf&#41;λs &#61; λ^s
g&#40;t&#41; &#61; &#40;exp&#40;-λ*t&#41;-1&#41;/t^&#40;1&#43;s&#41;/gamma&#40;-s&#41;
@show res, err &#61; quadgk&#40;g,0,Inf&#41;A &#61; &#91;2 -1 0; -1 2 -1; 0 -1 2&#93; # some positive definite matrix
h&#40;t&#41; &#61; &#40;exp&#40;-A.*t&#41;-I&#41;/t^&#40;1&#43;s&#41;/gamma&#40;-s&#41;singularity_integral, singularity_error &#61; quadgk&#40;h, 1e-10, 1e-5&#41;
regular_integral, regular_error &#61; quadgk&#40;h, 1e-5, Inf&#41;
@show result &#61; singularity_integral &#43; regular_integral
@show error &#61; singularity_error &#43; regular_error</code></pre>
<p>which will print</p>
<pre><code class="language-julia">&#40;res, err&#41; &#61; quadgk&#40;f, 0, Inf&#41; &#61; &#40;0.8705505365052336, 1.2164780075652479e-8&#41;
&#40;res, err&#41; &#61; quadgk&#40;g, 0, Inf&#41; &#61; &#40;1.7402976255082268, 2.515036776166618e-8&#41;
result &#61; singularity_integral &#43; regular_integral &#61; &#91;1.6837899364901885 -0.7050512093960599 -0.03988519645256732; -0.7050512093960599 1.6439047399317526 -0.7050512098966073; -0.03988519645256732 -0.7050512098966073 1.683789936502625&#93;
error &#61; singularity_error &#43; regular_error &#61; 3.822238569033589e-8</code></pre>
<p>Alternatively, you can also look into something like &#91;Cauchy principal values&#93;&#91;https://en.wikipedia.org/wiki/Cauchy<em>principal</em>value&#93; and &#91;this example&#93;&#91;https://juliamath.github.io/QuadGK.jl/stable/quadgk-examples/#Cauchy-principal-values&#93;</p>
<p>–Edit: update to new information–</p>
<p>I&#39;m afraid I can&#39;t reproduce the same error. When I run your code &#40;I&#39;ve added using LinearAlgebra for &#91;diagm&#93;&#91;https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/#LinearAlgebra.diagm&#93;&#41; I get </p>
<pre><code class="language-julia">res2 &#61; &#91;15.354655632950173 -6.419790221101635 -0.3665284746983265; -6.419790221101635 14.988127158828647 -6.4197902215468154; -0.3665284746983265 -6.4197902215468154 15.354655632887033&#93;
norm&#40;res2 &#43; As&#41; / norm&#40;As&#41; &#61; 0.018647374162762107
norm&#40;res1 &#43; As&#41; / norm&#40;As&#41; &#61; 0.01864737561229984
norm&#40;res1 - res2&#41; &#61; 4.9872522079524005e-8
4.9872522079524005e-8</code></pre>
 ]]>
  </content:encoded>
    
  <pubDate>Wed, 29 Nov 2023 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Martin Mikkelsen</atom:name>
  </atom:author>
        
</item>
</channel></rss>